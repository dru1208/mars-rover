1. file system reads first line
2. grid input processor instance created, uses methods on first line string
3. grid instance created from input processor property

4. file system reads next two lines
5. rover input processor instance created
6. rover input processor uses methods on second line string for rover info, and methods on third line string for rover instructions
7. rover instance created from input processor properties and grid instance
8. add rover instance to grid

// maybe add rover instance to an array of rovers that should be processed with instructions, or run it off of all the rovers on the grid
// probably do the latter

9. repeat steps 4-8 for each pair of lines that follow to generate each rover instance

10. with an array of all the rovers, execute the instructions

11. create output processor instance with grid
12. run method that console.log's all of the individual rovers





grid class:
necessary to check if the x and y values are valid (> 0, and integers) (do this in index.js instead of grid.js)
- x value
- y value
- array of rovers on the map
- method to add rover to the map
- method to check if a rover can be placed on the map or if something else is already there (this can be expanded in case the plateau in the future has certain objects)


rover class:
- position x
- position y
- direction
- method for rotating L ()
- method for rotating R ()
- method for moving forward space (), accesses this.direction and uses switch cases
check if moving forward is possible with an existing rover in the space


method for instructions, runs through each instruction (array) and applies the function to it



the first of each chunk of 2 input lines will generate a new class
the second line will call class methods to manipulate the rover


start with rover rotation and movement logic


don't forget to double check that the Rover is actually in the grid

if movement leads to position being negative, make the rover not move

// assumption that the rover will not move forward if at the edge of the grid


make an assumption that the rover will not move forward if there is another rover in the spot

???
console.log the answer
write the answer in a text file


after creating all of the new rover class instances, we should push the coordinates to the array

instead of using array coordinates, directly push the rover instances to the array to avoid updating rovers


when checking for rover movement, might need to filter out the existing rover itself (probably won't have to because the existing rover will be in the past space, not the new space that is being checked)




TDD really helpful, realized there was a problem with my add rover function and test because my checkForwardSpace test failed




1. file system reads first line
2. grid input processor instance created, uses methods on first line string
3. grid instance created from input processor property

4. file system reads next two lines
5. rover input processor instance created
6. rover input processor uses methods on second line string for rover info, and methods on third line string for rover instructions
7. rover instance created from input processor properties and grid instance
8. add rover instance to grid

// maybe add rover instance to an array of rovers that should be processed with instructions, or run it off of all the rovers on the grid
// probably do the latter

9. repeat steps 4-8 for each pair of lines that follow to generate each rover instance

10. with an array of all the rovers, execute the instructions

11. create output processor instance with grid
12. run method that console.log's all of the individual rovers




assume that rover instructions are only allowed ot be L, R, or M or the value will not be processed as an instruction



improvements
if the rover info given is not at an integer, maybe round it in the future

chose parse int in case there were extra values added and the rover is outside of the grid with a rounding up
also if the value is 2!, parseInt returns 2 in the event of an additional typo