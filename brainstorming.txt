1. process text input
2. set new class instance grid
3. set new class instance rover
4. process movement instructions, add to answer
5. repeat for each set of rovers/instructions
6. return answer


grid class:
necessary to check if the x and y values are valid (> 0, and integers) (do this in index.js instead of grid.js)
- x value
- y value
- array of rovers on the map
- method to add rover to the map
- method to check if a rover can be placed on the map or if something else is already there (this can be expanded in case the plateau in the future has certain objects)


rover class:
- position x
- position y
- direction
- method for rotating L ()
- method for rotating R ()
- method for moving forward space (), accesses this.direction and uses switch cases
check if moving forward is possible with an existing rover in the space


method for instructions, runs through each instruction (array) and applies the function to it



the first of each chunk of 2 input lines will generate a new class
the second line will call class methods to manipulate the rover


start with rover rotation and movement logic


don't forget to double check that the Rover is actually in the grid

if movement leads to position being negative, make the rover not move

// assumption that the rover will not move forward if at the edge of the grid


make an assumption that the rover will not move forward if there is another rover in the spot


console.log the answer
write the answer in a text file


after creating all of the new rover class instances, we should push the coordinates to the array

instead of using array coordinates, directly push the rover instances to the array to avoid updating rovers


when checking for rover movement, might need to filter out the existing rover itself (probably won't have to because the existing rover will be in the past space, not the new space that is being checked)